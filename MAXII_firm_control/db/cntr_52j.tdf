--lpm_counter CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX II" lpm_direction="DOWN" lpm_port_updown="PORT_UNUSED" lpm_width=1 clock cnt_en data q sload CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 14.0 cbx_cycloneii 2014:06:17:18:06:03:SJ cbx_lpm_add_sub 2014:06:17:18:06:03:SJ cbx_lpm_compare 2014:06:17:18:06:03:SJ cbx_lpm_counter 2014:06:17:18:06:03:SJ cbx_lpm_decode 2014:06:17:18:06:03:SJ cbx_mgl 2014:06:17:18:10:38:SJ cbx_stratix 2014:06:17:18:06:03:SJ cbx_stratixii 2014:06:17:18:06:03:SJ  VERSION_END


-- Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus II License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION maxii_lcell (aclr, aload, cin, clk, dataa, datab, datac, datad, ena, inverta, regcascin, sclr, sload)
WITH ( cin0_used, cin1_used, cin_used, lut_mask, operation_mode, output_mode, power_up, register_cascade_mode, sum_lutc_input, synch_mode, x_on_violation)
RETURNS ( combout, cout, regout);

--synthesis_resources = lut 1 
SUBDESIGN cntr_52j
( 
	clock	:	input;
	cnt_en	:	input;
	data[0..0]	:	input;
	q[0..0]	:	output;
	sload	:	input;
) 
VARIABLE 
	counter_cella0 : maxii_lcell
		WITH (
			cin_used = "false",
			lut_mask = "6655",
			operation_mode = "normal",
			synch_mode = "on"
		);
	aclr	: NODE;
	aclr_actual	: WIRE;
	clk_en	: NODE;
	s_val[0..0]	: WIRE;
	safe_q[0..0]	: WIRE;
	sclr	: NODE;
	sset	: NODE;
	sset_node	: WIRE;

BEGIN 
	counter_cella[0..0].aclr = aclr_actual;
	counter_cella[0..0].aload = B"0";
	counter_cella[0..0].clk = clock;
	counter_cella[0..0].dataa = safe_q[];
	counter_cella[0..0].datab = cnt_en;
	counter_cella[0..0].datac = ((sset & s_val[]) # ((! sset) & data[]));
	counter_cella[0..0].datad = ( B"1");
	counter_cella[0..0].ena = clk_en;
	counter_cella[0..0].sclr = sclr;
	counter_cella[0..0].sload = (sset_node # sload);
	aclr = GND;
	aclr_actual = aclr;
	clk_en = VCC;
	q[] = safe_q[];
	s_val[] = B"1";
	safe_q[] = counter_cella[0..0].regout;
	sclr = GND;
	sset = GND;
	sset_node = B"0";
END;
--VALID FILE
